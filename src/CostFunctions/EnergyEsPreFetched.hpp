/*
 * EnergyEstimator.hpp
 * based on EnergyCF.hpp
 *  Created on: Nov 08, 2017
 *      Author: Liao
 */

#ifndef SRC_COSTFUNCTIONS_ENERGYESPREFETCHED_HPP_
#define SRC_COSTFUNCTIONS_ENERGYESPREFETCHED_HPP_

#include <vector>
#include <Eigen/Dense>
#include "../utilities/TypeDefine.hpp"
#include "CostFunction.hpp"
#include "EnergyCFBaseClass.hpp"

namespace networkVMC{

class Hamiltonian;

/**
 * \class EnergyEsPreFetched
 *
 * \brief Implementation of the EnergyEs for diffuse sampling
 *
 * This class implements the EnergyEs CostFunction (expectation value with respect to stochastic sampling)
 * for a diffuse sampling
 */

class EnergyEsPreFetched: public EnergyCFBaseClass{
  public:
	/// EnergyEsPreFetched can only be generated by EnergyEs
	friend class EnergyEs;

	paraVector nabla(State const &input) const;

	// Allow for polymorphic copy
	EnergyEsPreFetched* clone() const {return new EnergyEsPreFetched(*this);}

	// For sake of completeness, we specify that this requires connections
	int connectionsRequired() const {return numCons;}
private:
    // Make sure this is not manually constructed, but only via
    // EnergyEs. This way, we cannot attribute the wrong CF to a sampler

	/**
	 * \param H_ Hamiltonian used to obtain the energy
	 * \param numCons_ Number of matrix elements taken into account per basis vector
	 * Can only be called by the friend class
	 */
	explicit EnergyEsPreFetched(Hamiltonian const &H_, int numCons_):
		EnergyCFBaseClass(H_), numCons(numCons_){};

	/**
	 * \brief Compute the energy expectation value and cache it
	 *
	 * \param input Vector represented by a State object
	 * \return Expectation value of the energy
	 */
	coeffType evaluate(State const &input) const;

	/// Number of matrix elements sampled per basis vector
	int numCons;
};

}

#endif /* SRC_COSTFUNCTIONS_ENERGYESPREFETCHED_HPP_ */
